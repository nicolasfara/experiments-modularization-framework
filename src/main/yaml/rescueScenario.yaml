incarnation: scafi

_constants:
  retentionTime: &retentionTime 10.0
  neighborRange: &neighborRange 1.5
  cloudNode: &cloudNode 0
  movementSpeed: &movementSpeed 0.005 # m/s
  terminationTime: &terminationTime 100 # 1 hour

variables:
  random: &random
    min: 0
    max: 200
    step: 1
    default: 2
  scenarioType: &scenarioType # 0 = monolithic, 1 = modularization
    type: ArbitraryVariable
    parameters: [1, [0, 1]]
  nodeSide: &nodeSide
    type: ArbitraryVariable
    parameters: [10, [5, 10]]
  variableRate: &variableRate
    type: ArbitraryVariable
    parameters: [3, [3, 5, 10]]

  # -- Effectively final variables
  emergencyServiceProgramRate: &emergencyServiceProgramRate
    language: scala
    formula: |
      if (scenarioType == 0) 0.4 else variableRate
  steeringServiceProgramRate: &steeringServiceProgramRate
    language: scala
    formula: |
      if (scenarioType == 0) 0.4 else 0.5
  totalNodes:
    language: scala
    formula: Math.pow(nodeSide.asInstanceOf[Int], 2).toInt - 1
  offloadingMapping: &offloadingMapping
    language: scala
    formula: |
      s"""
      if ($scenarioType == 1) {
        (1 to ${totalNodes.asInstanceOf[Int]})
          .map(i => ("it.unibo.sim.EmergencyService" -> i) -> 0)
          .toMap
      } else Map(("it.unibo.sim.SteeringService", 0) -> 0)
      """

seeds:
  scenario: *random
  simulation: *random

network-model:
  type: ConnectWithinDistanceAndCloud
  parameters: [*neighborRange, *cloudNode]

_reactions:
  - program: &emergencyService
    - time-distribution: *emergencyServiceProgramRate
      type: Event
      actions:
        - type: RunScafiProgram
          parameters: [it.unibo.sim.EmergencyService, *retentionTime]
    - program: send

  - program: &steeringService
    - time-distribution: *steeringServiceProgramRate
      type: Event
      actions:
        - type: RunScafiProgram
          parameters: [it.unibo.sim.SteeringService, *retentionTime]
    - program: send

environment:
  type: Continuous2DEnvironment
  parameters: []
  global-programs:
    - time-distribution:
        type: Trigger
        parameters: [ 0 ]
      type: SetupNode
      parameters: [ *cloudNode, *terminationTime ]

deployments: ## i.e, how to place nodes
  type: Grid
  parameters: [0, 0, *nodeSide, *nodeSide, 1, 1, 0.5, 0.5]
  programs:
    - *steeringService
    - *emergencyService
#    - *movement
  contents:
    - molecule: offloadingMapping
      concentration: *offloadingMapping

export:
  - type: CSVExporter
    parameters:
      exportPath: data
      fileNameRoot: rescue_vector
      interval: 1
    data:
      - time
      - molecule: rmsError
        aggregators: [ product, sum, mean, variance ]
        value-filter: onlyfinite

terminate:
  - type: AfterTime
    parameters: [ *terminationTime ]
