incarnation: scafi

_constants:
  source: &source 1
  destination: &destination 19
  retentionTime: &retentionTime 5.0
  programRate1: &programRate1 1.0
  programRate2: &programRate2 2.0

variables:
  random: &random
    min: 0
    max: 5
    step: 1
    default: 2
  range: &range
    formula: 1.5
    language: scala
  cloudNode: &cloudNode
    formula: 0
    language: scala
  offloadingMapping: &offloadingMapping
    language: scala
    formula: |
      Map(
        ("\"it.unibo.sim.Channel2\"" -> 4) -> cloudNode,
        ("\"it.unibo.sim.Channel2\"" -> 8) -> cloudNode,
        ("\"it.unibo.sim.Channel2\"" -> 19) -> cloudNode
      )

seeds:
  scenario: *random
  simulation: *random

network-model:
  type: ConnectWithinDistanceAndCloud
  parameters: [*range, *cloudNode]

_reactions:
  - program: &channel1
    - time-distribution: *programRate1
      type: Event
      actions:
        - type: RunScafiProgram
          parameters: [it.unibo.sim.Channel1, *retentionTime]
    - program: send

  - program: &channel2
    - time-distribution: *programRate2
      type: Event
      actions:
        - type: RunScafiProgram
          parameters: [it.unibo.sim.Channel2, *retentionTime]
    - program: send

environment:
  type: Continuous2DEnvironment
  parameters: []
  global-programs:
    - time-distribution:
        type: Trigger
        parameters: [ 0 ]
      type: SetupNode
      parameters: [ *cloudNode ]

deployments: ## i.e, how to place nodes
  type: Grid
  parameters: [0, 0, 5, 5, 1, 1, 0.1, 0.1]
  programs:
    - *channel1
    - *channel2
  contents:
    - molecule: offloadingMapping
      concentration: *offloadingMapping
    - molecule: source
      concentration: *source
    - molecule: destination
      concentration: *destination
    - molecule: inChannel
      concentration: false
    - molecule: channelWidth
      concentration: 0.1
