incarnation: scafi

_constants:
  retentionTime: &retentionTime 10.0
  neighborRange: &neighborRange 1.5
  cloudNode: &cloudNode 0
  movementSpeed: &movementSpeed 0.005 # m/s
  terminationTime: &terminationTime 3600 # 1 hour

variables:
  random: &random
    min: 0
    max: 4
    step: 1
    default: 2
  nodeSide: &nodeSide
    type: ArbitraryVariable
    parameters: [10, [5, 10]]

  # -- Effectively final variables
  totalNodes:
    language: scala
    formula: Math.pow(nodeSide.asInstanceOf[Int], 2).toInt - 1
  offloadingMapping: &offloadingMapping
    language: scala
    formula: |
      Map()

seeds:
  scenario: *random
  simulation: *random

network-model:
  type: ConnectWithinDistance
  parameters: [*neighborRange]

_reactions:
  - program: &monolithProgram
    - time-distribution: 1.0
      type: Event
      actions:
        - type: RunScafiProgram
          parameters: [it.unibo.sim.MonolithProgram, *retentionTime]
    - program: send

  - pool: &movement
    - time-distribution: 10
      type: Event
      actions:
        - type: MoveToTarget
          parameters: [ movementTarget, *movementSpeed ]

environment:
  type: Continuous2DEnvironment
  parameters: []
  global-programs:
    - time-distribution:
        type: Trigger
        parameters: [ 0 ]
      type: SetupNode
      parameters: [ *random, *cloudNode, *terminationTime ]

deployments: ## i.e, how to place nodes
  type: Grid
  parameters: [0, 0, *nodeSide, *nodeSide, 1, 1, 0.5, 0.5]
  programs:
    - *monolithProgram
    - *movement
  contents:
    - molecule: offloadingMapping
      concentration: *offloadingMapping
    - molecule: movementTarget
      concentration: (0, 0)

export:
  - type: CSVExporter
    parameters:
      exportPath: data
      fileNameRoot: monolithRescueScenario
      interval: 10
    data:
      - time
      - molecule: requiredInterventionTime
        aggregators: [ min, max, mean, variance ]
        value-filter: onlyfinite
      - molecule: needsIntervention
        aggregators: [ sum, variance ]
        value-filter: onlyfinite
      - molecule: messagesCount
        aggregators: [ sum, mean ]
        value-filter: onlyfinite
      - molecule: saved
        aggregators: [ sum ]
        value-filter: onlyfinite

terminate:
  - type: AfterTime
    parameters: [ *terminationTime ]
