incarnation: scafi

variables:
  random: &random
    min: 0
    max: 5
    step: 1
    default: 2
  range: &range
    formula: 100
    language: scala
  moveFrequency: &moveFrequency
    formula: 1
    language: scala

_constants:
  source: &source 0
  destination: &destination 5 
  width: &width 20.0
  retentionTime: &retentionTime 5.0
  programRate1: &programRate1 1.0
  programRate2: &programRate2 2.0
  exportInterval: &exportInterval 1.0
  totalNodes: &totalNodes 1497
  timeToAlign: &timeToAlign 1365922800
  dependencyGraph: &dependencyGraph "scala.collection.Map(\"it.unibo.sim.Channel1\" -> List(\"it.unibo.sim.Channel2\"))"

seeds:
  scenario: *random
  simulation: *random

#environment:
#  type: OSMEnvironment
#  parameters: ["vcm.pbf", false]
environment:
  type: Continuous2DEnvironment
  parameters: []

network-model:
  type: ConnectWithinDistanceAndCloud #*connectionType
  parameters: [*range]

_reactions:
  - program: &channel1
      - time-distribution: *programRate1
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.sim.Channel1, *retentionTime]
      - program: send
  - program: &channel2
      - time-distribution: *programRate2
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.sim.Channel2, *retentionTime]
      - program: send
  - program: &dev4channel2
      - time-distribution: *programRate2
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.sim.Channel2, *retentionTime, 4]
      - program: send
  - program: &dev0channel1
      - time-distribution: *programRate2
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.sim.Channel1, *retentionTime, 0, [it.unibo.sim.Channel2]]
      - program: send

deployments: ## i.e, how to place nodes
  parameters:
    - type: Point
      parameters: [0,0]
      programs:
        #- *channel1
        - *channel2
      contents: 
        shared: &shared
          - molecule: dependencyGraph
            concentration: *dependencyGraph
          - molecule: source
            concentration: *source
          - molecule: destination
            concentration: *destination
          - molecule: width
            concentration: *width
          - molecule: g
            concentration: Double.PositiveInfinity
          - molecule: nodeType
            concentration: 0
    - type: Point
      parameters: [50,0]
      programs:
        - *channel1
        - *channel2
      contents: *shared
    - type: Point
      parameters: [100,0]
      programs:
        - *channel1
        - *channel2
      contents: *shared
    - type: Point
      parameters: [-20,50]
      programs:
        - *channel1
        - *channel2
      contents: *shared
    - type: Point
      parameters: [50,50]
      programs:
        - *channel1
        #- *channel2
      contents: *shared
    - type: Point
      parameters: [100,50]
      programs:
        - *channel1
        - *channel2
      contents: *shared
    - type: Point # CLOUD
      parameters: [50,200]
      programs:
        - *dev0channel1
        - *dev4channel2
      contents:
        shared: *shared
        just-here:
          - molecule: nodeType
            concentration: 1 #cloud

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: "experiment"
      exportPath: "build/exports/macroDeployment"
      fileExtension: "txt"
      interval: *exportInterval
    data:
      - time
      - type: NumberOfNodes
      - molecule: g
        aggregators: [sum]
        value-filter: onlyfinite
      - molecule: g
        aggregators: [mean]
        value-filter: onlyfinite
